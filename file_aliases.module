<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function file_aliases_menu() {
  $items['filefield_paths/alias/%'] = array(
    'page callback' => 'file_aliases_load_fid',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function file_aliases_theme_registry_alter(&$theme_registry) {
  $theme_registry['imagefield_image']['theme path'] = drupal_get_path('module', 'file_aliases');
  $theme_registry['imagefield_image']['function'] = 'theme_file_aliases_imagefield_image';
  $theme_registry['imagefield_image']['theme paths'][0] = drupal_get_path('module', 'file_aliases');
}

/**
 * Implementation of hook_filefield_paths_field_settings().
 */
function file_aliases_filefield_paths_field_settings() {
  return array(
    'file_alias' => array(
      'title' => 'File alias',
      'sql' => 'filealias',

      'data' => array('display' => 'file_alias_display'),

      'form' => array(
        'file_alias' => array(
          '#type' => 'textfield',
          '#title' => t('File alias'),
          '#default_value' => '',
        ),

        'file_alias_display' => array(
          '#type' => 'checkbox',
          '#title' => t('Display alias'),
          '#description' => t('If checked, the file alias will be displayed instead of the file') .'.',
          '#default_value' => 0,
          '#weight' => 3
        ),
      ),
    )
  );
}

/**
 * Implementation of hook_filefield_paths_process_file().
 */
function file_aliases_filefield_paths_process_file($new, $file, $settings, $node, $update) {
  if ($new) {
    $file['filealias'] = filefield_paths_process_string($settings['filealias']['value'], 'node', $node, $settings['filealias']);
    $file['filealias'] = filefield_paths_process_string($file['filealias'], 'field', array(0 => $file['field']), $settings['filealias']);

    path_set_alias('filefield_paths/alias/'. $file['field']['fid'], $file['filealias']);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function file_aliases_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      if (($ffp = filefield_paths_get_fields($node, $op)) == FALSE) {
        break;
      }

      foreach ($ffp['#files'] as &$file) {
        if ($ffp['#settings'][$file['name']]['filealias']['display'] == TRUE) {
          $filefield_paths_alias = 'filefield_paths/alias/'. $file['field']['fid'];
          if (($alias = drupal_get_path_alias($filefield_paths_alias)) != $filefield_paths_alias) {
            $path = (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC)
              ? ''
              : base_path();

            foreach (explode('/', file_directory_path()) as $dir) {
              $path .= '../';
            }

            $file['field']['origpath'] = $file['field']['filepath'];
            $file['field']['filepath'] = $path . $alias;
            $file['field']['filename'] = array_pop(explode('/', $alias));
          }
        }
      }
      break;

  }
}

function file_aliases_load_fid($fid) {
  if (request_uri() == base_path() .'filefield_paths/alias/'. $fid) {
    drupal_not_found();
    exit;
  }

  $result = db_fetch_object(db_query("SELECT filemime, filepath FROM {files} WHERE fid = %d", $fid));

  if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
    file_download($result->filepath);
  }
  else {
    header('Content-Type: '. $result->filemime);
    // Fix for IE/PDF download issue
    // @see http://drupal.org/node/411910
    header('Cache-Control: public');
    readfile($result->filepath);
  }
}

/**
 * Modified version of theme_imagefield_image().
 */
function theme_file_aliases_imagefield_image($file, $alt = '', $title = '', $attributes = NULL, $getsize = TRUE) {
  $file = (array)$file;

  if (isset($file['origpath'])) {
    $file['alias'] = $file['filepath'];
    $file['filepath'] = $file['origpath'];
  }

  if (!file_exists($file['filepath'])) {
    return '<!-- File not found: '. $file['filepath'] .' -->';
  }

  if ($getsize && (list($width, $height, $type, $image_attributes) = @getimagesize($file['filepath']))) {
    $attributes['width'] = $width;
    $attributes['height'] = $height;
  }

  if (!empty($title)) {
    $attributes['title'] = $title;
  }

  // Alt text should be added even if it is an empty string.
  $attributes['alt'] = $alt;

  // Add a timestamp to the URL to ensure it is immediately updated after editing.
  $query_string = '';
  if (isset($file['timestamp'])) {
    $query_character = (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE && variable_get('clean_url', '0') == '0') ? '&' : '?';
    $query_string = $query_character . $file['timestamp'];
  }

  $url = file_create_url(isset($file['alias']) ? $file['alias'] : $file['filepath']) . $query_string;
  $attributes['src'] = $url;
  $attributes = drupal_attributes($attributes);
  return '<img '. $attributes .' />';
}
